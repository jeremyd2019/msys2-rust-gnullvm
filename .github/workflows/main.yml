name: main
on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        msystem: [CLANG64, CLANG32]
    name: ${{ matrix.msystem }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: actions/checkout@v4
        with:
          repository: msys2/MINGW-packages
          ref: master
          fetch-depth: 0
          path: temp
          persist-credentials: false

      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          install: base-devel
          update: true
          release: true
          location: 'D:\M'

      - name: Move Checkout
        run: |
          If (Test-Path "C:\_") { rm -r -fo "C:\_" }
          Copy-Item -Path ".\temp" -Destination "C:\_" -Recurse

      - name: apply gnullvm-1
        shell: bash
        run: |
          cd /c/_
          git clean -dxxf .
          git reset --hard
          git apply -3 $GITHUB_WORKSPACE/0001-rust-build-gnu-and-gnullvm-targets-for-clang.patch

      - name: Fetch keys
        shell: msys2 {0}
        run: |
          cd /c/_/mingw-w64-rust
          ../.ci/fetch-validpgpkeys.sh

      - name: build host -gnu, target -gnu,-gnullvm
        shell: msys2 {0}
        run: |
          unset VCPKG_ROOT
          cd /c/_
          mv mingw-w64-rust B
          cd B
          makepkg-mingw --noconfirm --noprogressbar --nocheck --syncdeps --rmdeps --cleanbuild
          pacman --noconfirm --noprogressbar -U ${MINGW_PACKAGE_PREFIX}-rust-*.pkg.tar.*
          mkdir -p /c/artifacts/1
          mv -f *.pkg.tar.* /c/artifacts/1

      - name: Clean git and apply gnullvm-2
        shell: bash
        run: |
          cd /c/_
          rm -rf B
          git clean -dxxf .
          git reset --hard
          git apply -3 $GITHUB_WORKSPACE/0002-rust-build-gnullvm-targets-for-clang.patch

      - name: build host/target -gnullvm, llvm cross hack
        shell: msys2 {0}
        run: |
          unset VCPKG_ROOT
          cd /c/_
          mv mingw-w64-rust B
          cd B
          makepkg-mingw --noconfirm --noprogressbar --nocheck --syncdeps --rmdeps --cleanbuild
          pacman --noconfirm --noprogressbar -U ${MINGW_PACKAGE_PREFIX}-rust-*.pkg.tar.*
          mkdir -p /c/artifacts/2
          mv -f *.pkg.tar.* /c/artifacts/2

      - name: Clean git and apply gnullvm-3
        shell: bash
        run: |
          cd /c/_
          rm -rf B
          git clean -dxxf .
          git reset --hard
          git apply -3 $GITHUB_WORKSPACE/0003-rust-build-gnullvm-targets-for-clang.patch

      - name: build host/target -gnullvm
        shell: msys2 {0}
        run: |
          unset VCPKG_ROOT
          cd /c/_
          mv mingw-w64-rust B
          cd B
          awk -i inplace -F= -v OFS== '$1=="pkgrel" {$2++} 1' PKGBUILD
          makepkg-mingw --noconfirm --noprogressbar --nocheck --syncdeps --rmdeps --cleanbuild
          pacman --noconfirm --noprogressbar -U ${MINGW_PACKAGE_PREFIX}-rust-*.pkg.tar.*
          mkdir -p /c/artifacts/3
          mv -f *.pkg.tar.* /c/artifacts/3

      - name: Upload artifacts
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.msystem }}-packages
          path: C:/artifacts/
          if-no-files-found: ignore

      - name: "Clean up runner"
        if: ${{ always() }}
        continue-on-error: true
        run: |
          If (Test-Path "C:\_") { rm -r -fo "C:\_" }

  release:
    permissions:
      contents: write
    needs: build
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - uses: actions/download-artifact@v4

      - name: Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -x
          ver="$(tar -xOf CLANG64-packages/3/mingw-w64-clang-x86_64-rust-[^d]*.pkg.tar.* .PKGINFO | sed -ne '/^pkgver = /s///p')"
          gh release create "${ver}" --title "${ver}" --notes "" -R ${{ github.repository }} CLANG*-packages/3/*
